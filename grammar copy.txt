PROGRAM ::= DECLARATION PROGRAM_REST
PROGRAM_REST ::= DECLARATION PROGRAM_REST
PROGRAM_REST ::= EOP

DECLARATION ::= FUNCTION
DECLARATION ::= VAR_DECL

FUNCTION ::= FUNCTION_REST ( PARAMS ) { STMT_LIST }
FUNCTION_REST ::= TYPE IDENTIFIER

TYPE ::= INT_TYPE TYPE_REST
TYPE ::= BOOL_TYPE TYPE_REST
TYPE ::= CHAR_TYPE TYPE_REST
TYPE ::= STRING_TYPE TYPE_REST
TYPE ::= VOID_TYPE TYPE_REST
TYPE_REST ::= [ ] TYPE_REST
TYPE_REST ::= EOP

PARAMS ::= INT_TYPE TYPE_REST IDENTIFIER PARAMS_REST
PARAMS ::= BOOL_TYPE TYPE_REST IDENTIFIER PARAMS_REST
PARAMS ::= CHAR_TYPE TYPE_REST IDENTIFIER PARAMS_REST
PARAMS ::= STRING_TYPE TYPE_REST IDENTIFIER PARAMS_REST
PARAMS ::= VOID_TYPE TYPE_REST IDENTIFIER PARAMS_REST
PARAMS ::= EOP
PARAMS_REST ::= , PARAMS
PARAMS_REST ::= EOP 

VAR_DECL::= FUNCTION_REST VAR_DECL_REST
VAR_DECL_REST ::= ;
VAR_DECL_REST ::= = EXPRESSION ;

STMT_LIST ::= STATEMENT STMT_LIST_REST
STMT_LIST_REST ::= STATEMENT STMT_LIST_REST
STMT_LIST_REST ::= EOP

STATEMENT ::= VAR_DECL
STATEMENT ::= IF_STMT
STATEMENT ::= FOR_STMT
STATEMENT ::= RETURN_STMT
STATEMENT ::= EXPR_STMT
STATEMENT ::= PRINT_STMT
STATEMENT ::= { STMT_LIST }

IF_STMT ::= if ( EXPRESSION ) { STMT_LIST } IF_STMT_REST
IF_STMT_REST ::= else { STMT_LIST }
IF_STMT_REST ::= EOP

FOR_STMT ::= for ( EXPR_STMT EXPRESSION ; EXPR_STMT ) { STMT_LIST }

RETURN_STMT ::= return EXPRESSION ;

PRINT_STMT ::= print ( EXPR_LIST ) ;

EXPR_STMT ::= EXPRESSION ;
EXPR_STMT ::= ;

EXPR_LIST ::= EXPRESSION EXPR_LIST_REST
EXPR_LIST_REST ::= , EXPR_LIST
EXPR_LIST_REST ::= EOP

EXPRESSION ::= IDENTIFIER = EXPRESSION
EXPRESSION ::= OR_EXPR

OR_EXPR ::= AND_EXPR OR_EXPR_REST
OR_EXPR_REST ::= || AND_EXPR OR_EXPR_REST
OR_EXPR_REST ::= EOP

AND_EXPR ::= EQ_EXPR AND_EXPR_REST
AND_EXPR_REST ::= && EQ_EXPR AND_EXPR_REST
AND_EXPR_REST ::= EOP

EQ_EXPR ::= REL_EXPR EQ_EXPR_REST
EQ_EXPR_REST ::= == REL_EXPR EQ_EXPR_REST
EQ_EXPR_REST ::= != REL_EXPR EQ_EXPR_REST
EQ_EXPR_REST ::= EOP

REL_EXPR ::= TERM REL_EXPR_REST
REL_EXPR_REST ::= < TERM REL_EXPR_REST
REL_EXPR_REST ::= > TERM REL_EXPR_REST
REL_EXPR_REST ::= <= TERM REL_EXPR_REST
REL_EXPR_REST ::= >= TERM REL_EXPR_REST
REL_EXPR_REST ::= EOP

TERM ::= UNARY TERM_REST
TERM_REST ::= * UNARY TERM_REST
TERM_REST ::= / UNARY TERM_REST
TERM_REST ::= % UNARY TERM_REST
TERM_REST ::= EOP

UNARY ::= ! UNARY
UNARY ::= - UNARY
UNARY ::= FACTOR

FACTOR ::= IDENTIFIER FACTOR_REST
FACTOR ::= INT_LITERAL FACTOR_REST
FACTOR ::= CHAR_LITERAL FACTOR_REST
FACTOR ::= STRING_LITERAL FACTOR_REST
FACTOR ::= BOOL_LITERAL FACTOR_REST
FACTOR ::= ( EXPRESSION ) FACTOR_REST
FACTOR_REST ::= [ EXPRESSION ] FACTOR_REST
FACTOR_REST ::= ( EXPR_LIST ) FACTOR_REST
FACTOR_REST ::= EOP

EOP ::= ''

IDENTIFIER ::= LETTER IDENTIFIER_REST
IDENTIFIER ::= _ IDENTIFIER_REST

IDENTIFIER_REST ::= LETTER IDENTIFIER_REST
IDENTIFIER_REST ::= DIGIT IDENTIFIER_REST
IDENTIFIER_REST ::= _ IDENTIFIER_REST
IDENTIFIER_REST ::= EOP

LETTER ::= a | b | c | ... | z | A | B | C | ... | Z
DIGIT ::= 0 | 1 | 2 | ... | 9
SYMBOL ::= ! | " | # | $ | % | & | ' | ( | ) | * | + | , | - | . | / | : | ; | < | = | > | ? | @ | [ | \ | ] | ^ | _ | ` | { | | | | }

INT_TYPE ::= integer
BOOL_TYPE ::= boolean
CHAR_TYPE ::= char
STRING_TYPE ::= string
VOID_TYPE ::= void

INT_LITERAL ::= DIGIT INT_LITERAL_REST
INT_LITERAL_REST ::= DIGIT INT_LITERAL_REST
INT_LITERAL_REST ::= EOP

CHAR_LITERAL ::= ' CHAR_LITERAL_REST '
CHAR_LITERAL_REST ::= DIGIT
CHAR_LITERAL_REST ::= LETTER
CHAR_LITERAL_REST ::= SYMBOL

STRING_LITERAL ::= " STRING_LITERAL_REST "
STRING_LITERAL_REST ::= CHAR_LITERAL_REST STRING_LITERAL_REST
STRING_LITERAL_REST ::= EOP

BOOL_LITERAL ::= true
BOOL_LITERAL ::= false