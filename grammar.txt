PROGRAM ::= DECLARATIONS PROGRAM_REST
PROGRAM_REST ::= DECLARATION PROGRAM_REST
PROGRAM_REST ::= EOP

DECLARATION ::= FUNCTION
DECLARATION ::= VAR_DECL


FUNCTION’ ::= TYPE IDENTIFIER
FUNCTION ::= FUNCTION'(PARAMS) {STMT_LIST}

TYPE ::= BOOL_TYPE TYPE_REST
TYPE ::= CHAR_TYPE TYPE_REST
TYPE ::= STRING_TYPE TYPE_REST
TYPE ::= VOID TYPE_REST

TYPE_REST ::= [ ] TYPE_REST
TYPE_REST ::= EOP

PARAMS ::= TYPE IDENTIFIER PARAMS_REST
PARAMS ::= EOP

PARAMS_REST ::= , PARAMS
PARAMS_REST ::= EOP

vAR_DECL::= FUNCTION’ VAR_DECL_REST


VAR_DECL_REST ::= ;
VAR_DECL_REST ::= = EXPRESSION ;

STMT_LIST ::= STATEMENT STMT_LIST_REST
STMT_LIST_REST ::= STATEMENT STMT_LIST_REST
STMT_LIST_REST ::= EOP

STATEMENT ::= VAR_DECL
STATEMENT ::= IF_STMT
STATEMENT ::= FOR_STMT
STATEMENT ::= RETURN_STMT
STATEMENT ::= EXPR_STMT
STATEMENT ::= PRINT_STMT
STATEMENT ::= { STMT_LIST }

IF_STMT ::= if ( EXPRESSION ) STATEMENT IF_STMT_REST
IF_STMT_REST ::= else STATEMENT
IF_STMT_REST ::= EOP


FOR_STMT ::= for ( EXPR_STMT EXPRESSION ; EXPR_STMT ) STATEMENT

RETURN_STMT ::= return EXPRESSION ;

PRINT_STMT ::= print ( EXPR_LIST ) ;

EXPR_STMT ::= EXPRESSION ;
EXPR_STMT ::= ;

EXPR_LIST ::= EXPRESSION EXPR_LIST_REST
EXPR_LIST_REST ::= , EXPR_LIST
EXPR_LIST_REST ::= EOP

EXPRESSION ::= IDENTIFIER = EXPRESSION
EXPRESSION ::= OR_EXPR

OR_EXPR ::= AND_EXPR OR_EXPR_REST
OR_EXPR_REST ::= OR AND_EXPR OR_EXPR_REST
OR_EXPR_REST ::= EOP

AND_EXPR ::= EQ_EXPR AND_EXPR_REST
AND_EXPR_REST ::= AND EQ_EXPR AND_EXPR_REST
AND_EXPR_REST ::= EOP

EQ_EXPR ::= REL_EXPR EQ_EXPR_REST
EQ_EXPR_REST ::= == REL_EXPR EQ_EXPR_REST
EQ_EXPR_REST ::= != REL_EXPR EQ_EXPR_REST
EQ_EXPR_REST ::= EOP

REL_EXPR ::= TERM REL_EXPR_REST
REL_EXPR_REST ::= < TERM REL_EXPR_REST
REL_EXPR_REST ::= > TERM REL_EXPR_REST
REL_EXPR_REST ::= <= TERM REL_EXPR_REST
REL_EXPR_REST ::= >= TERM REL_EXPR_REST
REL_EXPR_REST ::= EOP

TERM ::= UNARY TERM_REST
TERM_REST ::= * UNARY TERM_REST
TERM_REST ::= / UNARY TERM_REST
TERM_REST ::= % UNARY TERM_REST
TERM_REST ::= EOP

UNARY ::= ! UNARY
UNARY ::= - UNARY
UNARY ::= FACTOR

FACTOR ::= IDENTIFIER FACTOR_REST
FACTOR ::= INTEGER_LITERAL FACTOR_REST
FACTOR ::= CHAR_LITERAL FACTOR_REST
FACTOR ::= STRING_LITERAL FACTOR_REST
FACTOR ::= BOOLEAN_LITERAL FACTOR_REST
FACTOR ::= ( EXPRESSION ) FACTOR_REST

FACTOR_REST ::= [ EXPRESSION ] FACTOR_REST
FACTOR_REST ::= ( EXPR_LIST ) FACTOR_REST
FACTOR_REST ::= EOP

EOP ::= ''

